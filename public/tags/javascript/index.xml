<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on A Technology Journal</title>
    <link>http://localhost:1313/tags/javascript/</link>
    <description>Recent content in Javascript on A Technology Journal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Feb 2013 10:53:43 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Closures and Scoping in Javascript</title>
      <link>http://localhost:1313/articles/closures_and_scoping_in_javascript/</link>
      <pubDate>Sat, 02 Feb 2013 10:53:43 -0700</pubDate>
      
      <guid>http://localhost:1313/articles/closures_and_scoping_in_javascript/</guid>
      <description>

&lt;p&gt;Per Wikipedia, a Closure is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; a function or reference to a function together with a referencing environmentâ€”a table storing a reference to each of the non-local variables (also called free variables) of that function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I want you to pay special attention to the last part of that definition: &lt;strong&gt;&lt;em&gt;together with a referencing environment, containing references to each of the non-local variables of that function&lt;/em&gt;&lt;/strong&gt;.  This is easier explained with a little code:&lt;/p&gt;

&lt;pre class=&#34;brush: js&#34;&gt;
     function closureTest() {
          var outerVar = &#34;World&#34;;
          document.onload = function() {
               console.log(&#34;Hello&#34; + outerVar);
          }
     }
&lt;/pre&gt;
In this example, the _referencing environment_ corresponds to the _outerVar_ variable, and the closure is the function that&#39;s assigned to the _document.onload_ event property.   The result of this example is a &#34;Hello World&#34; message printed in the console when the document is loaded.  

You might not be impressed by any of this, as this is a pretty trivial example.  The interesting thing to understand about closures lies not so much in the ability to treat functions as variables, but rather in the context (or _referencing environment_) that these functions can _reference_ in a future point in time.

### A True Story about Closures

The other day, as I was pair programming with my coworker, we ran into an issue which led us to a deeper understanding of how Javascript handles closures . The task at hand was a mini library for managing analytics events for a _HTML5_ mobile app.  Each analytics event is triggered by a DOM event (e.g. _click_) and can have 1 or more _attributes_ associated with it.  For example, these are the attributes associated with the _modelTap_ event:

&lt;pre class=&#34;brush: js&#34;&gt;
    {
        &#39;navigationCategory&#39; : &#39;popular&#39;,
        &#39;model&#39; : &#39;myModel&#39;
    }
&lt;/pre&gt;

&lt;p&gt;Simple stuff.  The tricky part is that, different &lt;em&gt;events&lt;/em&gt; may contain different type of &lt;em&gt;attributes&lt;/em&gt;, and these &lt;em&gt;attributes&lt;/em&gt; need to be populated from different parts of the DOM.  We solved this is by creating an &lt;em&gt;array&lt;/em&gt; of analytic configuration objects, containing the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;eventName&lt;/em&gt;&lt;/strong&gt;, a &lt;em&gt;String&lt;/em&gt;,&lt;/li&gt;
&lt;li&gt;a CSS &lt;strong&gt;&lt;em&gt;selector&lt;/em&gt;&lt;/strong&gt;, a &lt;em&gt;String&lt;/em&gt;,&lt;/li&gt;
&lt;li&gt;and a &lt;strong&gt;&lt;em&gt;getAttributes&lt;/em&gt;&lt;/strong&gt;  &lt;em&gt;Function&lt;/em&gt; that returns a Javascript object with the attributes for this event.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre class=&#34;brush: js&#34;&gt;
    var analyticConfigs = [
        {
            eventName: &#39;modelTap&#39;,
            selector: &#39;li.model&#39;,
            getAttributes: function(context) {
                var model = $(context).text();
                var navigationCategory = $(context).find(&#39;#category&#39;).text();
                return {model: model, navigationCategory: navigationCategory};
            }
        },
        {
            eventName: &#39;navTap&#39;,
            selector: &#39;li.navigation_tab&#39;,
            getAttributes: function(context) {
                var tabName = $(context).text();
                return {tabName: tabName};
            }
        }
    ];
&lt;/pre&gt;

&lt;p&gt;The idea is to iterate through the configuration array and for each config object attach a &lt;em&gt;&amp;lsquo;click&amp;rsquo;&lt;/em&gt; event handler to the elements resolved by the &lt;em&gt;selector&lt;/em&gt; property.  Within the &lt;em&gt;click&lt;/em&gt; handler, we would call the function that&amp;rsquo;s responsible for resolving the &lt;em&gt;event name&lt;/em&gt; and&lt;br /&gt;
&lt;em&gt;attributes&lt;/em&gt; object and send this info through the analytics API.&lt;/p&gt;

&lt;p&gt;To put it in code:&lt;/p&gt;

&lt;pre class=&#34;brush: js&#34;&gt;
    for (var i = 0; i &lt; analyticConfigs.length; i++) {
        var config = analyticConfigs[i];
        $(&#39;body&#39;).on(&#39;click&#39;, config.selector, function() {
            sendAnalyticsEvent(this, config);
        })
    }

    function sendAnalyticsEvent(context, config) {
        var eventName = config.eventName;
        var attributes = config.getAttributes(context);

                // Omitting API call to analytics code for clarity.
        console.log(&#34;Sending analytic event: &#34; + eventName + &#34;; with attributes &#34; + JSON.stringify(attributes));
    }
&lt;/pre&gt;

&lt;p&gt;This should work fine, right ? Turns out it doesn&amp;rsquo;t.  After doing a couple of clicks to the different elements, the output of this is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt; Sending analytic event: navTap; with attributes {&amp;quot;tabName&amp;quot;:&amp;quot;Super Tab&amp;quot;}
 &amp;gt; Sending analytic event: navTap; with attributes {&amp;quot;tabName&amp;quot;:&amp;quot;Super Tab&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can you guess where the problem is ?&lt;/p&gt;

&lt;p&gt;The problem lies in the &lt;em&gt;for&lt;/em&gt; loop.  Turns out, Javascript creates new scopes within &lt;em&gt;functions&lt;/em&gt; (i.e. private variables).  However, it does not do so within blocks (i.e. &lt;em&gt;for&lt;/em&gt; and &lt;em&gt;while&lt;/em&gt; loops).  This means that in the example above, there&amp;rsquo;s a single &lt;em&gt;config&lt;/em&gt; var created for the entire duration of the loop (and beyond!), and that every &lt;em&gt;closure&lt;/em&gt; created within the loop, will reference the same &lt;em&gt;config&lt;/em&gt; object.&lt;/p&gt;

&lt;p&gt;To make this clearer, we can print the contents of the &lt;em&gt;config&lt;/em&gt; object outside the loop:&lt;/p&gt;

&lt;pre class=&#34;brush: js&#34;&gt;
     for (var i = 0; i &lt; analyticConfigs.length; i++) {
          var config = analyticConfigs[i];
          $(&#39;body&#39;).on(&#39;click&#39;, config.selector, function() {
               sendAnalyticsEvent(this, config);
          })
     }  
     console.log(&#34;Config: &#34; + config.eventName);
&lt;/pre&gt;

&lt;p&gt;The code above prints:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt; Config: navTap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sick, right ?&lt;/p&gt;

&lt;h3 id=&#34;so-how-to-solve-this:08f3ab03952d0fba6b0e56ee042251be&#34;&gt;So, how to solve this?&lt;/h3&gt;

&lt;p&gt;The key is to create a new scope for the &lt;em&gt;config&lt;/em&gt; variable.  As I mentioned previously, Javascript creates a new scope each time a function is created, so we can leverage this in the following way:&lt;/p&gt;

&lt;pre class=&#34;brush: js&#34;&gt;
     for (var i = 0; i &lt; analyticConfigs.length; i++) {
          var config = analyticConfigs[i];
          $(&#39;body&#39;).on(&#39;click&#39;, config.selector, function(cfg) {
                return function() { sendAnalyticsEvent(this, cfg) };
          }(config));
     }  
&lt;/pre&gt;

&lt;p&gt;What we&amp;rsquo;re doing here is wrapping our function within an anonymous function that receives a &lt;em&gt;cfg&lt;/em&gt; parameter, effectively creating a new scope (where the &lt;em&gt;cfg&lt;/em&gt; var lives in).  We immediately call this function passing in our &lt;em&gt;config&lt;/em&gt; variable.&lt;/p&gt;

&lt;p&gt;The output of this code is now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt; Sending analytic event: modelTap; with attributes {&amp;quot;model&amp;quot;:&amp;quot; Super Model &amp;quot;,&amp;quot;navigationCategory&amp;quot;:&amp;quot;&amp;quot;}
 &amp;gt; Sending analytic event: navTap; with attributes {&amp;quot;tabName&amp;quot;:&amp;quot; Super Tab &amp;quot;}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interesting, right ?&lt;/p&gt;

&lt;h3 id=&#34;conclusion:08f3ab03952d0fba6b0e56ee042251be&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Lots of languages have closures: obviously functional languages such as Scala, Haskell, Clojure, etc, but also Object Oriented languages such as Ruby, Python, and C#.  Even in Java you can achieve similar functionality with anonymous inner classes.  In all of these languages though, new scopes are created within blocks such as &lt;em&gt;for&lt;/em&gt; and &lt;em&gt;while&lt;/em&gt; loops.&lt;/p&gt;

&lt;p&gt;Take as an example the following Ruby code:&lt;/p&gt;

&lt;pre class=&#34;brush: ruby&#34;&gt;
     closure_array = []
     numbers = %w{one two three}

     numbers.each do |n|
       closure_array &lt;&lt; -&gt;{puts n}
     end

     closure_array.each do |c|
       c.call
     end
&lt;/pre&gt;

&lt;p&gt;The output of the above code is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt; one
 &amp;gt; two
 &amp;gt; three
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, things work as expected, and there&amp;rsquo;s no need to create a new scope or anything like that.&lt;/p&gt;

&lt;p&gt;Javascript is a very powerful language and it&amp;rsquo;s far from perfect.  In my opinion, this is a flaw of the language itself.  Of course, you can argue that it&amp;rsquo;s just a matter of understanding the language, but still you have to accept that it&amp;rsquo;s counter intuitive.  This is just one example of why languages such as &lt;em&gt;CoffeeScript&lt;/em&gt; have emerged.&lt;/p&gt;

&lt;p&gt;All in all, I really enjoy programming in Javascript, and the more I understand it, the more enjoyable it becomes.&lt;/p&gt;

&lt;p&gt;As Douglas Crockford put it, &lt;em&gt;Javascript&lt;/em&gt; is &lt;a href=&#34;http://www.crockford.com/javascript/javascript.html&#34;&gt;the worlds most misunderstood language.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>